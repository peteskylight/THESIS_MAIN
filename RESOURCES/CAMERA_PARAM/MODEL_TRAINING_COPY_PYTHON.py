# -*- coding: utf-8 -*-
"""HandGesture CODE

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wBhwGWMmfD-1XLUre3_cbYvx20_oLQUg
"""

import os
os.environ['KMP_DUPLICATE_LIB_OK']='True'

import csv

import numpy as np
import tensorflow as tf
from sklearn.model_selection import train_test_split

RANDOM_SEED = 42

import pandas as pd

df = pd.read_csv('keypointsSample.csv')
df.shape

NUM_CLASSES = 4

dataset = 'keypointsSample.csv'

model_save_path = 'keypoint_classifier.keras'
tflite_save_path = 'keypoint_classifier.tflite'

import pandas as pd

# Determine the maximum number of columns
max_columns = max(open(dataset, 'r'), key=lambda x: x.count(',')).count(',')

# Read the CSV with the maximum number of columns
df = pd.read_csv(dataset, header=None, names=list(range(max_columns)))

# import pandas as pd

# # Load your CSV file, skipping the first row (which is usually the header)
# df = pd.read_csv('keypoint.csv')

# # Now remove the first row of data (which was originally the second row)
# df = df.iloc[1:]

# # # # # Convert all columns to numeric, non-numeric values will become NaN
# df = df.apply(pd.to_numeric, errors='coerce')
# df = df.drop(2148)
# # # # # Remove rows with NaN values (non-numeric values)
# df = df.dropna()

# # # # # Export the DataFrame to a new CSV file without the header
# df.to_csv('keypoint1.csv', index=False, header=False)

X_dataset = np.loadtxt(dataset, delimiter=',', dtype='float32', usecols=list(range(1, 35)))

y_dataset = np.loadtxt(dataset, delimiter=',', dtype='int32', usecols=(0))

X_train, X_test, y_train, y_test = train_test_split(X_dataset, y_dataset, train_size=0.75, random_state=RANDOM_SEED)

model = tf.keras.models.Sequential([
    tf.keras.layers.Input((34, )),
    tf.keras.layers.Dropout(0.2),
    tf.keras.layers.Dense(20, activation='relu'),
    tf.keras.layers.Dropout(0.4),
    tf.keras.layers.Dense(10, activation='relu'),
    tf.keras.layers.Dense(NUM_CLASSES, activation='softmax')
])

model.summary()  # tf.keras.utils.plot_model(model, show_shapes=True)

# Model checkpoint callback
cp_callback = tf.keras.callbacks.ModelCheckpoint(
    model_save_path, verbose=1, save_weights_only=False)
# Callback for early stopping
es_callback = tf.keras.callbacks.EarlyStopping(patience=20, verbose=1)

# Model compilation
model.compile(
    optimizer='adam',
    loss='sparse_categorical_crossentropy',
    metrics=['accuracy']
)

model.fit(
    X_train,
    y_train,
    epochs=1000,
    batch_size=128,
    validation_data=(X_test, y_test),
    callbacks=[cp_callback, es_callback]
)

# Model evaluation
val_loss, val_acc = model.evaluate(X_test, y_test, batch_size=16)

# Loading the saved model
model = tf.keras.models.load_model(model_save_path)

# Inference test
predict_result = model.predict(np.array([X_test[0]]))
print(np.squeeze(predict_result))
print(np.argmax(np.squeeze(predict_result)))

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix, classification_report

def print_confusion_matrix(y_true, y_pred, report=True):
    labels = sorted(list(set(y_true)))
    cmx_data = confusion_matrix(y_true, y_pred, labels=labels)

    df_cmx = pd.DataFrame(cmx_data, index=labels, columns=labels)

    fig, ax = plt.subplots(figsize=(7, 6))
    sns.heatmap(df_cmx, annot=True, fmt='g' ,square=False)
    ax.set_ylim(len(set(y_true)), 0)
    plt.show()

    if report:
        print('Classification Report')
        print(classification_report(y_test, y_pred))

Y_pred = model.predict(X_test)
y_pred = np.argmax(Y_pred, axis=1)

print_confusion_matrix(y_test, y_pred)

# Save as a model dedicated to inference
model.save(model_save_path,save_format='tf', include_optimizer=False)

model = tf.keras.models.load_model('keypoint_classifier.keras')

tflite_save_path = 'keypoint_classifier.tflite'

converter = tf.lite.TFLiteConverter.from_keras_model(model)
converter.optimizations = [tf.lite.Optimize.DEFAULT]
tflite_quantized_model = converter.convert()

open(tflite_save_path, 'wb').write(tflite_quantized_model)

interpreter = tf.lite.Interpreter(model_path=tflite_save_path)
interpreter.allocate_tensors()

# Get I / O tensor
input_details = interpreter.get_input_details()
output_details = interpreter.get_output_details()

interpreter.set_tensor(input_details[0]['index'], np.array([X_test[0]]))

# Commented out IPython magic to ensure Python compatibility.
# %%time
# # Inference implementation
# interpreter.invoke()
# tflite_results = interpreter.get_tensor(output_details[0]['index'])

print(np.squeeze(tflite_results))
print(np.argmax(np.squeeze(tflite_results)))





